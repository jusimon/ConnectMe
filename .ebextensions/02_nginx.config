files:
  "/etc/nginx/conf.d/01_proxy.conf":
    mode: "000644"
    owner: root
    group: root
    content: |
      client_max_body_size 10M;

  "/etc/nginx/nginx.conf":
    mode: "000644"
    owner: root
    group: root
    content: |
      # The content of this file is based on the content of /etc/nginx/conf.d/webapp_healthd.conf

      # Change the name of the upstream because it can't have the same name
      # as the one defined by default in /etc/nginx/conf.d/webapp_healthd.conf
      user nginx;
      error_log /var/log/nginx/error.log;
      pid /run/nginix.pid;

      include /user/share/nginx/modules/*.conf;

      events {
          worker_connections 1024;
      }

      http {
          log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
          '$status $body_bytes_sent "$http_referer" '
          '"$http_user_agent" "$http_x_forwarded_for"';
          
          access_log  /var/log/nginx/access.log  main;
          
          sendfile            on;
          tcp_nopush          on;
          tcp_nodelay         on;
          keepalive_timeout   65;
          types_hash_max_size 2048;
          
          include             /etc/nginx/mime.types;
          default_type        application/octet-stream;
          
          # Load modular configuration files from the /etc/nginx/conf.d directory.
          # See http://nginx.org/en/docs/ngx_core_module.html#include
          # for more information.
          
          include /etc/nginx/conf.d/*.conf;
          
          server {
              listen       8080 default_server;
              listen       [::]:8080 default_server;
              server_name  _;
              
              #        return 301 https://$host$request_uri;
              if ($http_x_forwarded_proto = 'http'){
                  return 301 https://$host$request_uri;
              }
              
              root         /usr/share/nginx/html;
              
              # Load configuration files for the default server block.
              include /etc/nginx/default.d/*.conf;

              location / {
                 if ($request_method = 'OPTIONS') {
                      add_header 'Access-Control-Allow-Origin' '*';
                      add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                      #
                      # Custom headers and headers various browsers *should* be OK with but aren't
                      #
                      add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
                      #
                      # Tell client that this pre-flight info is valid for 20 days
                      #
                      add_header 'Access-Control-Max-Age' 24600;
                      add_header 'Content-Type' 'text/plain; charset=utf-8';
                      add_header 'Content-Length' 0;
                      return 204;
                 }
                 if ($request_method = 'POST') {
                     add_header 'Access-Control-Allow-Origin' '*';
                     add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                     add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
                     add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
                 }
                 if ($request_method = 'GET') {
                     add_header 'Access-Control-Allow-Origin' '*';
                     add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                     add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
                     add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
                 }
              }
            
              location /api {
                  proxy_pass http://127.0.0.1:5001/api;
              }
            
              location /auth {
                  proxy_pass http://127.0.0.1:5001/auth;
              }

              error_page 404 /404.html;
            
              location = /40x.html {
              }

              error_page 500 502 503 504 /50x.html;
            
              location = /50x.html {
              }
          }
      }
